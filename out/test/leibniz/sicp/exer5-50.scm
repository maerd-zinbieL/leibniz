(load "regsim.scm")
(load "eceval-support.scm")
(load "compiler.scm")
(load "exer5-50-source-code.scm")

;;;添加对let的支持
(define (let? exp) (tagged-list? exp 'let))
(define (make-lambda parameters body)
  (cons 'lambda (cons parameters body)))
(define (make-application-call proc-name args) (cons proc-name args))
  (define (make-define name value)
    (list 'define name value))
(define (named-let? exp) (symbol? (cadr exp)))
(define (let-clauses exp)
  (if (named-let? exp)
      (caddr exp)
      (cadr exp)))
(define (let-body exp)
  (if (named-let? exp)
      (cdddr exp)
      (cddr exp)))
(define (first-clause clauses) (car clauses))
(define (rest-clauses clauses) (cdr clauses))
(define (clause-var clause) (car clause))
(define (clause-exp clause) (cadr clause))
(define (let->combination exp)
  (let ((clauses (let-clauses exp))
        (body (let-body exp)))
    (let ((vars (map clause-var clauses))
          (exps (map clause-exp clauses)))
      (if (named-let? exp)
          (list
           (make-lambda '()
             (list (sequence->exp
                    (list (make-define (cadr exp)
                                       (make-lambda vars body))
                     (make-application-call (cadr exp) exps))))))
          (cons (make-lambda vars body) exps)))))

(define (compile exp target linkage)
  (cond ((self-evaluating? exp)
         (compile-self-evaluating exp target linkage))
        ((quoted? exp) (compile-quoted exp target linkage))
        ((variable? exp)
         (compile-variable exp target linkage))
        ((assignment? exp)
         (compile-assignment exp target linkage))
        ((definition? exp)
         (compile-definition exp target linkage))
        ((if? exp) (compile-if exp target linkage))
        ((lambda? exp) (compile-lambda exp target linkage))
        ((begin? exp)
         (compile-sequence (begin-actions exp)
                           target
                           linkage))
        ((cond? exp) (compile (cond->if exp) target linkage))
        ((let? exp) (compile (let->combination exp) target linkage))
        ((application? exp)
         (compile-application exp target linkage))
        (else
         (error "Unknown expression type -- COMPILE" exp))))

(define primitive-procedures
  (list (list 'car car)
        (list 'cdr cdr)
        (list 'cddr cddr)
        (list 'cadr cadr)
        (list 'cdddr cdddr)
        (list 'caddr caddr)
        (list 'caadr caadr)
        (list 'cadddr cadddr)
        (list 'cdadr cdadr)
        (list 'cadadr cadadr)
        (list 'not not)
        (list 'map map)
        (list 'set-car! set-car!)
        (list 'set-cdr! set-cdr!)
        (list 'newline newline)
        (list 'display
              (lambda (x)
                (if (tagged-list? x 'primitive)
                    (display '<primitive-procedure>)
                    (display x))))
        (list 'read read)
        (list 'number? number?)
        (list 'string? string?)
        (list 'true #t)
        (list 'false #f)
        (list 'error error)
        (list 'symbol? symbol?)
        (list 'pair? pair?)
        (list 'cons cons)
        (list 'null? null?)
        (list 'list list)
        (list 'eq? eq?)
        (list 'apply
              (lambda (proc args)
                (apply (primitive-implementation proc) args)))
        (list 'length length)
	      (list '+ +)
       	(list '- -)
      	(list '* *)
       	(list '= =)
        (list '/ /)
        (list '> >)
      	(list '< <)
        ))

(define (setup-environment)
  (let ((initial-env
         (extend-environment (primitive-procedure-names)
                             (primitive-procedure-objects)
                             the-empty-environment)))
    (define-variable! 'true true initial-env)
    (define-variable! 'false false initial-env)
    initial-env))

(define (get-global-environment)
  the-global-environment)

(define the-global-environment (setup-environment))

(define eceval-operations
  (list
   ;;primitive Scheme operations
   (list 'read read)			;used by eceval

   ;;used by compiled code
   (list 'list list)
   (list 'cons cons)

   ;;operations in syntax.scm
   (list 'self-evaluating? self-evaluating?)
   (list 'quoted? quoted?)
   (list 'text-of-quotation text-of-quotation)
   (list 'variable? variable?)
   (list 'assignment? assignment?)
   (list 'assignment-variable assignment-variable)
   (list 'assignment-value assignment-value)
   (list 'definition? definition?)
   (list 'definition-variable definition-variable)
   (list 'definition-value definition-value)
   (list 'lambda? lambda?)
   (list 'lambda-parameters lambda-parameters)
   (list 'lambda-body lambda-body)
   (list 'if? if?)
   (list 'if-predicate if-predicate)
   (list 'if-consequent if-consequent)
   (list 'if-alternative if-alternative)
   (list 'begin? begin?)
   (list 'begin-actions begin-actions)
   (list 'last-exp? last-exp?)
   (list 'first-exp first-exp)
   (list 'rest-exps rest-exps)
   (list 'application? application?)
   (list 'operator operator)
   (list 'operands operands)
   (list 'no-operands? no-operands?)
   (list 'first-operand first-operand)
   (list 'rest-operands rest-operands)

   ;;operations in eceval-support.scm
   (list 'true? true?)
   (list 'false? false?)		;for compiled code
   (list 'make-procedure make-procedure)
   (list 'compound-procedure? compound-procedure?)
   (list 'procedure-parameters procedure-parameters)
   (list 'procedure-body procedure-body)
   (list 'procedure-environment procedure-environment)
   (list 'extend-environment extend-environment)
   (list 'lookup-variable-value lookup-variable-value)
   (list 'set-variable-value! set-variable-value!)
   (list 'define-variable! define-variable!)
   (list 'primitive-procedure? primitive-procedure?)
   (list 'apply-primitive-procedure apply-primitive-procedure)
   (list 'prompt-for-input prompt-for-input)
   (list 'announce-output announce-output)
   (list 'user-print user-print)
   (list 'empty-arglist empty-arglist)
   (list 'adjoin-arg adjoin-arg)
   (list 'last-operand? last-operand?)
   (list 'no-more-exps? no-more-exps?)	;for non-tail-recursive machine
   (list 'get-global-environment get-global-environment)

   ;;for compiled code (also in eceval-support.scm)
   (list 'make-compiled-procedure make-compiled-procedure)
   (list 'compiled-procedure? compiled-procedure?)
   (list 'compiled-procedure-entry compiled-procedure-entry)
   (list 'compiled-procedure-env compiled-procedure-env)
   (list 'apply apply)
   ))

(define (write-asm-to-file asm)
  (let ((output (open-output-file "exer5-50-evaluator-asm.scm")))
    (define (write-one-line asm)
      (if (null? asm)
          (close-output-port output)
          (begin
            (write (car asm) output)
            (newline output)
            (write-one-line (cdr asm)))))
    (write-one-line asm)))

(define metacircular-evaluator
  (let ((asm (statements (compile src 'val 'next))))
    (write-asm-to-file asm)
    (make-machine
     '(env proc val argl continue)
     eceval-operations
     (cons '(assign env (op get-global-environment))
           asm))))

(start metacircular-evaluator)
